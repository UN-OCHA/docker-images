FROM public.ecr.aws/unocha/nodejs-base:%%UPSTREAM%%

# Parse arguments for the build command.
ARG VERSION
ARG VCS_URL
ARG VCS_REF
ARG BUILD_DATE
ARG UPSTREAM

# A little bit of metadata management.
# See http://label-schema.org/
LABEL org.label-schema.schema-version="1.0" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vendor="UN-OCHA" \
      org.label-schema.version=$VERSION \
      org.label-schema.vcs-url=$VCS_URL \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.name="debian-snap-bases" \
      org.label-schema.description="This service provides a base Debian image with nodejs and Chrome for a Puppeteer/Chrome snapshot service." \
      org.label-schema.architecture="x86_64" \
      org.label-schema.distribution="Debian Linux" \
      org.label-schema.distribution-version="Buster"

ENV NODE_APP_DIR=/srv/www \
    PORT=8442 \
    PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true

COPY assets/ /tmp/assets

RUN set -x && mkdir -p /var/run/s6 && \
    apt-get -qy update && \
    apt-get -qy dist-upgrade && \
    apt-get -qy install \
        build-essential \
        imagemagick \
        libgconf-2-4 \
        fonts-freefont-ttf \
        fonts-roboto \
        gnupg \
        net-tools \
        procps \
        psmisc && \
    mv -f /tmp/assets/Roboto*.ttf /usr/share/fonts/truetype/roboto/ && \
    # Configure Chrome repo.
    curl -s https://dl-ssl.google.com/linux/linux_signing_key.pub -o linux_signing_key.pub && \
    apt-key add linux_signing_key.pub && \
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list && \
    # Clean stuff up
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    # Cleanup done, now ensure node starts at boot.
    mkdir -p /srv/www /srv/example /etc/services.d/node /root && \
    mv /tmp/assets/run_node /etc/services.d/node/run && \
    # Install the example app into /srv/example
    mv /tmp/assets/example/server.js /srv/example/ && \
    mv /tmp/assets/example/package.json /srv/example/ && \
    cd /srv/example && \
      npm install && \
    rm -rf /tmp/*

WORKDIR "${NODE_APP_DIR}"

EXPOSE ${PORT}

ENTRYPOINT ["/init"]