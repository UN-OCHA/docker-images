# -*- mode: nginx; mode: flyspell-prog;  ispell-local-dictionary: "american" -*-
### Nginx configuration for Drupal. This configuration makes use of
### drush (http:///drupal.org/project/drush) for site maintenance
### and like tasks:
###
### 1. Run the cronjobs.
### 2. Run the DB and code updates: drush up or drush upc followed by
###    drush updb to run any DB updates required by the code upgrades
###    that were performed.
### 3. Disabling of xmlrpc.xml, install.php (needed only for
###    installing the site) and update.php: all updates are now
###    handled through drush.

## The 'default' location.
location / {

    # Passworded until launch. Keeps bots out.
    # satisfy any;
    # allow 10.5.103.1/32;
    # allow 10.5.103.2/32;
    # allow 10.5.104.1/32;
    # allow 10.5.104.2/32;
    # deny  all;
    # auth_basic "Restricted access"; #realm
    # auth_basic_user_file /etc/nginx/.htpasswd-users;

    ## Drupal 404 from can impact performance. If using a module like
    ## search404 then 404's *have *to be handled by Drupal. Uncomment to
    ## relay the handling of 404's to Drupal.
    ## error_page 404 /index.php;

    ## Using a nested location is the 'correct' way to use regexes.

    ## Regular private file serving (i.e. handled by Drupal).
    location ^~ /system/files/ {
        ## Include the specific FastCGI configuration. This is for a
        ## FCGI backend like php-cgi or php-fpm.
        include apps/drupal/fastcgi_drupal.conf;
        fastcgi_pass phpcgi;

        ## If proxying to apache comment the two lines above and
        ## uncomment the two lines below.
        #proxy_pass http://phpapache/index.php?q=$uri;
        #proxy_set_header Connection '';

        ## For not signaling a 404 in the error log whenever the
        ## system/files directory is accessed add the line below.
        ## Note that the 404 is the intended behavior.
        log_not_found off;
    }

    # Do the same for multilingual private files.
    location ^~ /ar/system/files/ {
      include apps/drupal/fastcgi_drupal.conf;
      fastcgi_pass phpcgi;
      log_not_found off;
    }
    location ^~ /en/system/files/ {
      include apps/drupal/fastcgi_drupal.conf;
      fastcgi_pass phpcgi;
      log_not_found off;
    }
    location ^~ /fr/system/files/ {
      include apps/drupal/fastcgi_drupal.conf;
      fastcgi_pass phpcgi;
      log_not_found off;
    }
    location ^~ /ru/system/files/ {
      include apps/drupal/fastcgi_drupal.conf;
      fastcgi_pass phpcgi;
      log_not_found off;
    }
    location ^~ /es/system/files/ {
      include apps/drupal/fastcgi_drupal.conf;
      fastcgi_pass phpcgi;
      log_not_found off;
    }

    ## Trying to access private files directly returns a 404.
    location ^~ /sites/default/private/ {
        internal;
    }

    ## Trying to access private files directly returns a 404.
    location ^~ /sites/(.*)/private/ {
        internal;
    }

    ## Support for the file_force module
    ## http://drupal.org/project/file_force.
    location ^~ /(ar|en|fr|ru|es)/system/files_force/ {
        ## Include the specific FastCGI configuration. This is for a
        ## FCGI backend like php-cgi or php-fpm.
        include apps/drupal/fastcgi_drupal.conf;
        fastcgi_pass phpcgi;

        ## If proxying to apache comment the two lines above and
        ## uncomment the two lines below.
        #proxy_pass http://phpapache/index.php?q=$uri;
        #proxy_set_header Connection '';

        ## For not signaling a 404 in the error log whenever the
        ## system/files directory is accessed add the line below.
        ## Note that the 404 is the intended behavior.
        log_not_found off;
    }

    ## If accessing an image generated by Drupal 6 imagecache, serve it
    ## directly if available, if not relay the request to Drupal to (re)generate
    ## the image.
    location ~* /imagecache/ {
        ## Image hotlinking protection. If you want hotlinking
        ## protection for your images uncomment the following line.
        #include apps/drupal/hotlinking_protection.conf;

        access_log off;
        expires 30d;
        try_files $uri @drupal;
    }

    ## Drupal 7 generated image handling, i.e., imagecache in core. See:
    ## http://drupal.org/node/371374.
    location ~* /files/styles/ {
        ## Image hotlinking protection. If you want hotlinking
        ## protection for your images uncomment the following line.
        #include apps/drupal/hotlinking_protection.conf;

        access_log off;
        expires 30d;
        try_files $uri @drupal;
    }

    ## Advanced Aggregation module CSS
    ## support. http://drupal.org/project/advagg.
    location ~* /files/advagg_(?:css|js)/ {
        gzip_static on;
        access_log  off;
        expires     max;
        add_header  ETag "";
        add_header Cache-Control "max-age=31449600, no-transform, public";
        add_header  Accept-Ranges '';
        try_files $uri $uri/ @drupal;
    }

    ## Location for public files. Avoid hitting Drupal on thye *production* env
    ## if a file exists, but do pass it on otherwise, so stage_file_proxy can
    ## fetch a file from production if needed.
    location ^~ /sites/[^/]+/files/ {
        access_log off;
        expires 30d;
        ## No need to bleed constant updates. Send the all shebang in one
        ## fell swoop.
        tcp_nodelay off;

        ## Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 45s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;

        ## Location for aggregated css and js files under D 10.1. See:
        ## https://www.drupal.org/node/2888767#nginx-php-fpm
        location ^~ /sites/[^/]+/files/(css|js)/ {
            # Hit the original file *or* allow Drupal to aggregate.
            try_files $uri @drupal;
        }

        ## Serve the file directly and fall back to drupal in case stage_file_proxy is needed.
        try_files $uri @drupal-stage-file-proxy;
    }

    ## Location for public derivative images to avoid hitting Drupal for invalid
    ## image derivative paths or if the source image doesn't exist.
    location ^~ /sites/[^/]+/files/styles/ {

        ## Valid public derivative image paths.
        location ~ "^/sites/default/files/styles/[^/]+/public/(?<file_path>.*)$" {
            access_log off;
            expires 30d;
            ## No need to bleed constant updates. Send the all shebang in one
            ## fell swoop.
            tcp_nodelay off;
            ## Set the OS file cache.
            open_file_cache max=3000 inactive=120s;
            open_file_cache_valid 45s;
            open_file_cache_min_uses 2;
            open_file_cache_errors off;

            ## Return the derivative image if it already exists or ask Drupal
            ## to generate it otherwise.
            try_files $uri @drupal-generate-derivative-image;
        }

        ## Simply return a 404 for unrecognized derivative image paths.
        return 404;
    }

    ## All static files will be served directly.
    location ~* ^.+\.(?:cur|htc|ico|html|otf|ttf|eot|svg)$ {

        access_log off;
        expires 30d;
        ## No need to bleed constant updates. Send the all shebang in one
        ## fell swoop.
        tcp_nodelay off;
        ## Set the OS file cache.
        open_file_cache max=3000 inactive=120s;
        open_file_cache_valid 45s;
        open_file_cache_min_uses 2;
        open_file_cache_errors off;
    }

    ## PDFs and powerpoint files handling.
    location ~* ^.+\.(?:pdf|pptx?)$ {
        expires 30d;
        ## No need to bleed constant updates. Send the all shebang in one
        ## fell swoop.
        tcp_nodelay off;
    }

    ## MP3 and Ogg/Vorbis files are served using AIO when supported. Your OS must support it.
    location ~* /files/audio/mp3/.*\.mp3$ {
        directio 4k; # for XFS
        ## If you're using ext3 or similar uncomment the line below and comment the above.
        #directio 512; # for ext3 or similar (block alignments)
        tcp_nopush off;
        aio on;
        output_buffers 1 2M;
    }

    location ~* /files/audio/ogg/.*\.ogg$ {
        directio 4k; # for XFS
        ## If you're using ext3 or similar uncomment the line below and comment the above.
        #directio 512; # for ext3 or similar (block alignments)
        tcp_nopush off;
        aio on;
        output_buffers 1 2M;
    }

    ## Pseudo streaming of FLV files:
    ## http://wiki.nginx.org/HttpFlvStreamModule.
    ## If pseudo streaming isn't working, try to comment
    ## out in nginx.conf line with:
    ## add_header X-Frame-Options SAMEORIGIN;
    # location ^~ /sites/default/files/video/flv {
    #     location ~* ^/sites/default/files/video/flv/.*\.flv$ {
    #         flv;
    #     }
    # }

    ## Pseudo streaming of H264/AAC files. This requires an Nginx
    ## version greater or equal to 1.0.7 for the stable branch and
    ## greater or equal to 1.1.3 for the development branch.
    ## Cf. http://nginx.org/en/docs/http/ngx_http_mp4_module.html.
    # location ^~ /sites/default/files/video/mp4 { # videos
    #     location ~* ^/sites/default/files/video/mp4/.*\.(?:mp4|mov)$ {
    #         mp4;
    #         mp4_buffer_size 1M;
    #         mp4_max_buffer_size 5M;
    #     }
    # }

    # location ^~ /sites/default/files/audio/m4a { # audios
    #     location ~* ^/sites/default/files/audio/m4a/.*\.m4a$ {
    #         mp4;
    #         mp4_buffer_size 1M;
    #         mp4_max_buffer_size 5M;
    #     }
    # }

    ## Replicate the Apache <FilesMatch> directive of Drupal standard
    ## .htaccess. Disable access to any code files. Return a 404 to curtail
    ## information disclosure. Hide also the text files.
    ## And amend the list with Drupal 8/9/10 yaml files.
    location ~* ^(?:.+\.(?:htaccess|make|txt|engine|inc|info|install|module|profile|po|pot|sh|.*sql|test|theme|twig|tpl(?:\.php)?|xtmpl|yaml|yml)(~|\.sw[op]|\.bak|\.orig|\.save)?|code-style\.pl|/Entries.*|/Repository|/Root|/Tag|/Template|)$ {
        return 404;
    }

    ## Extend the list with Drupal 8/9/10 composer files and the rest of the new shipped .htaccess list :-)
    location ~* (composer\.(json|lock)|web\.config)|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$ {
        return 404;
    }

    ## First we try the URI and relay to the /index.php?q=$uri&$args if not found.
    try_files $uri @drupal;
}

########### Security measures ##########

## Uncomment the line below if you want to enable basic auth for
## access to all /admin URIs. Note that this provides much better
## protection if use HTTPS. Since it can easily be eavesdropped if you
## use HTTP.
#include apps/drupal/admin_basic_auth.conf;

## Restrict access to the strictly necessary PHP files. Reducing the
## scope for exploits. Handling of PHP code and the Drupal event loop.
location @drupal {
    ## Include the FastCGI config.
    include apps/drupal/fastcgi_drupal.conf;
    fastcgi_pass phpcgi;

    ## If proxying to apache comment the two lines above and
    ## uncomment the two lines below.
    #proxy_pass http://phpapache/index.php?q=$uri;
    #proxy_set_header Connection '';

    ## Filefield Upload progress
    ## http://drupal.org/project/filefield_nginx_progress support
    ## through the NginxUploadProgress modules.
    # track_uploads uploads 60s;
}

location @drupal-no-args {
    ## Include the specific FastCGI configuration. This is for a
    ## FCGI backend like php-cgi or php-fpm.
    include apps/drupal/fastcgi_no_args_drupal.conf;
    fastcgi_pass phpcgi;

    ## If proxying to apache comment the two lines above and
    ## uncomment the two lines below.
    #proxy_pass http://phpapache/index.php?q=$uri;
    #proxy_set_header Connection '';
}

## Internal location to ask Drupal to generate a derivative image if the
## source ## image is present. Add a bit of logic so that it does not break
## stage_file_proxy on non-prod environments.
location @drupal-generate-derivative-image {

  set_by_lua $environment 'return os.getenv("ENVIRONMENT")';

  # If this is not the production environement, pass the request to Drupal.
  if ($environment != "prod") {
    return 406;
  }
  # If the image is a webp image, pass the request to Drupal.
  if ($file_path ~* "^.*\.webp$") {
    return 406;
  }
  # If the source image doesn't exist, return a 404.
  if (!-f "$document_root/sites/default/files/$file_path") {
    return 404;
  }

  # Otherwise, pass the request to Drupal to generate the derivative.
  try_files /dev/null @drupal;
}

## Internal location check if we're a production site and potentially
## pass a request to stage_file_proxy if not.
location @drupal-stage-file-proxy {
  set_by_lua $environment 'return os.getenv("ENVIRONMENT")';

  # If this is the prod environment, the original $uri would have worked.
  if ($environment = "prod") {
    return 404;
  }

  # Not prod, pass the request to Drupal.
  try_files /dev/null @drupal;
}

## Disallow access to .bzr, .git, .hg, .svn, .cvs directories: return
## 404 as not to disclose information.
location ^~ /.bzr {
    return 404;
}

location ^~ /.git {
    return 404;
}

location ^~ /.hg {
    return 404;
}

location ^~ /.svn {
    return 404;
}

location ^~ /.cvs {
    return 404;
}

## Disallow access to patches directory.
location ^~ /patches {
    return 404;
}

## Disallow access to drush backup directory.
location ^~ /backup {
    return 404;
}

## Disable access logs for robots.txt.
location = /robots.txt {
    access_log off;
    ## Add support for the robotstxt module
    ## http://drupal.org/project/robotstxt.
    try_files $uri @drupal-no-args;
}

## RSS feed support.
location = /rss.xml {
    try_files $uri @drupal-no-args;
}

## XML Sitemap support.
location = /sitemap.xml {
    try_files $uri @drupal;
}

## Support for favicon. Return an 1x1 transparent GIF if it doesn't
## exist.
location = /favicon.ico {
    expires 30d;
    try_files /favicon.ico @empty;
}

## Return an in memory 1x1 transparent GIF.
location @empty {
    expires 30d;
    empty_gif;
}

## Any other attempt to access PHP files returns a 404.
location ~* ^.+\.php$ {
    return 404;
}

## Avoid a Drupal error when requesting index.phpfoobar.
location ~ "^/index\.php.+" {
    return 404;
}

if ( $args ~* "/autocomplete/" ) {
  return 406;
  ### error_page 406 = @drupal; ### error_page directive is not allowed within pseudo-location
}

error_page 406 = @drupal;
